{"version":3,"sources":["Components/Layout/SearchForm.js","Components/Layout/Navbar.js","Components/Layout/Sidebar.js","Components/Objects/ImageGallery.js","Components/Objects/Object.js","Components/Layout/Home.js","Components/FieldList.js","Components/Objects/ObjectList.js","Components/Forms/ObjectForm.js","Components/Forms/ArtistForm.js","Components/Forms/SubmissionForm.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","inputChange","e","setState","input","target","value","dropdownChange","dropdown","submitForm","preventDefault","state","console","log","sendInput","history","push","alert","Form","inline","onSubmit","this","Control","style","margin","size","as","title","id","onChange","type","Button","backgroundColor","color","border","Component","withRouter","TopNav","Navbar","height","className","Brand","Link","to","padding","Sidebar","Nav","paddingLeft","paddingRight","Item","textDecoration","onClick","setId","selectList","ImageGallery","gallery","images","map","val","idx","Image","maxHeight","maxWidth","thumbnail","key","src","Home","Container","marginTop","textAlign","position","bottom","href","List","listName","items","url","localStorage","getItem","fetch","then","res","json","setItem","newItem","overflow","listStyle","fontSize","paddingTop","setList","ObjectForm","setType","method","placeholder","name","setForm","Check","label","setCheckbox","checkImages","additionalImages","finalArray","split","trim","_id","options","body","JSON","stringify","onSuccess","newId","success","ArtistForm","AddNewForm","successDisplay","resetPage","setFormType","baseState","formType","displayForm","width","marginLeft","App","setStateFromUrl","pathArray","path","filter","fetchRandomId","browseSelection","dropdownSelection","formInput","setDropdown","selection","setFormSelection","optional","undefined","objectId","window","location","pathname","fluid","Row","noGutters","Col","row-bottom-margin","xs","borderTop","borderLeft","outlineTop","component","exact","render","FieldList","SubmissionForm","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.33c098ff.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport {withRouter} from 'react-router-dom'\n\n\nexport class SearchForm extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            input: \"\"\n            ,dropdown: \"\"\n        }\n    }\n\n    inputChange = (e)=> {\n        this.setState({\n            input: e.target.value\n        })\n    }\n\n    dropdownChange = e => {\n        this.setState({\n            dropdown: e.target.value\n        })\n    }\n\n    submitForm = (e)=> {\n        e.preventDefault()\n        if (this.state.dropdown !== \"\" && this.state.input !== \"\"){\n        console.log(this.state.input)\n        this.props.sendInput(this.state)\n        this.props.history.push(`/objects/${this.state.dropdown}/${this.state.input}`)\n        }\n        else {alert(\"Please select an area from the dropdown and enter the name of the section you would like to search.\")}\n    }\n    render() {\n        return (\n            <Form inline onSubmit={this.submitForm}>\n                <Form.Control style={{margin: 10}} size=\"sm\" as=\"select\" title=\"Select an area to search\" id=\"basic-nav-dropdown\" onChange={this.dropdownChange}>\n                    <option>Select an area to Search</option>\n                    <option value=\"id\">Object ID</option>\n                    <option value=\"department\">Departments</option>\n                    <option value=\"medium\">Media</option>\n                    <option value=\"category\">Categories</option>\n                    <option value=\"culture\">Cultures</option>\n                </Form.Control>\n                <Form.Control style={{margin: 5} } size=\"sm\" type=\"input\" onChange={this.inputChange} />\n                <Button style={{margin: 10, backgroundColor: \"#f5eba5\", color: \"#000000\", border: \"none\"}} size=\"sm\" type=\"submit\" >Search</Button>\n            </Form>\n        )\n    }\n}\n\nexport default withRouter(SearchForm)\n","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport SearchForm from './SearchForm'\nimport { Link } from 'react-router-dom'\n\nfunction TopNav(props){\n\n\n    return(\n            <Navbar style={{backgroundColor: \"#B85954\", height: \"100%\"}} className=\"justify-content-between\">\n                <Navbar.Brand as={Link} to=\"/\" style={{padding:20, color: \"#f5eba5\"}}><h1>Metropolitan Museum of Art</h1></Navbar.Brand>\n                \n                <SearchForm sendInput={props.sendInput}/>\n                \n            </Navbar>\n    )\n}\n\nexport default TopNav\n","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport Nav from 'react-bootstrap/Nav'\n\nfunction Sidebar(props) {\n    return (\n        <Nav style={{ paddingLeft: 10, paddingRight: 10, backgroundColor: \"#B85954\", height: \"100%\" }}>\n            <Nav.Item>\n                <h4 style={{ textDecoration: \"underline\" }}>Browse Collection</h4>\n                \n                <Nav.Link as={Link} to=\"/objects/random\" onClick={() => props.setId()}>Random Object</Nav.Link>\n                <Nav.Link as={Link} to=\"/objects/department/list\" onClick={() => props.selectList(\"department\")}>Departments</Nav.Link>\n                <Nav.Link as={Link} to=\"/objects/medium/list\" onClick={() => props.selectList(\"medium\")}>Media</Nav.Link>\n                <Nav.Link as={Link} to=\"/objects/category/list\" onClick={() => props.selectList(\"category\")}>Categories</Nav.Link>\n                <Nav.Link as={Link} to=\"/objects/culture/list\" onClick={() => props.selectList(\"culture\")}>Cultures</Nav.Link>\n                \n                <h4 style={{ textDecoration: \"underline\" }}>Advanced</h4>\n                <Nav.Link as={Link} to=\"/new/\" >Add New Object or Artist</Nav.Link>\n                <Nav.Link as={Link} to=\"/update\" >Update an Object or Artist</Nav.Link>\n                <Nav.Link as={Link} to=\"/delete\" >Delete an Object or Artist</Nav.Link>\n                </Nav.Item>\n        </Nav>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport Image from 'react-bootstrap/Image'\n\n\n\nexport default function ImageGallery(props) {\n\n    let images = props.images\n\n    let gallery = images.map((val, idx) => {\n        let galleryImage = <Image style={{maxHeight: \"400px\", maxWidth: \"300px\", margin: 10}} thumbnail key={idx} src={val} />\n        return galleryImage\n    })\n\n    return (\n        <div >\n            {gallery}\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport { Container, Row, Col, Badge, Card, Accordion } from 'react-bootstrap'\nimport Image from 'react-bootstrap/Image'\nimport ImageGallery from './ImageGallery'\n\n\nexport class Object extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            id: \"\"\n            ,featured: null\n            ,yearAcquired: \"\"\n            ,isPublicDomain: null\n            ,primaryImage: \"\"\n            ,primaryImageSmall: \"\"\n            ,additionalImages: []\n            ,department: \"\"\n            ,objectType: \"\"\n            ,title: \"\"\n            ,culture: \"\"\n            ,period: \"\"\n            ,artist: \"\"\n            ,dateCreated: \"\"\n            ,medium: \"\"\n            ,dimensions: \"\"\n            ,country: \"\"\n            ,category: \"\"\n            ,rights: \"\"\n            ,infoLink: \"\"\n            ,ready: false\n        }\n        \n    }\n\n    fetchObject = (id) => {\n                fetch(`${this.props.url}/objects/id/${id}`)\n                    .then(res => res.json())\n                    .then(res =>{\n                        this.setState({\n                            id: res._id\n                            ,featured: res.featured\n                            ,yearAcquired: res.yearAcquired\n                            ,isPublicDomain: res.isPublicDomain\n                            ,primaryImage: res.primaryImage\n                            ,primaryImageSmall: res.primaryImageSmall\n                            ,additionalImages: res.additionalImages\n                            ,department: res.department\n                            ,objectType: res.objectType\n                            ,title: res.title\n                            ,culture: res.culture\n                            ,period: res.period\n                            ,artist: res.artist\n                            ,dateCreated: res.dateCreated\n                            ,medium: res.medium\n                            ,dimensions: res.dimensions\n                            ,country: res.country\n                            ,category: res.category\n                            ,rights: res.rights\n                            ,infoLink: res.infoLink\n                            ,ready: true\n                            ,artistBio: \"\"\n                            ,artistNationality: \"\"\n                            ,artistBirthDate: \"\"\n                            ,artistDeathDate: \"\"\n                            ,artistGender: \"\"\n                            ,artistReady: false\n                        })\n                    })\n\n         \n      }\n\n      fetchArtistInfo = () => {\n          fetch(`${this.props.url}/artists/name/${this.state.artist}`)\n            .then(res => res.json())\n            .then(res =>{\n                if (res[0] !== undefined){\n                this.setState({\n                    artistBio: res[0].bio\n                    ,artistNationality: res[0].nationality\n                    ,artistBirthDate: res[0].birthDate\n                    ,artistDeathDate: res[0].deathDate\n                    ,artistGender: res[0].gender\n                    ,artistReady: true\n                })\n            }\n            })\n            if(this.state.artistReady === true) {\n            return( <div >\n                {this.state.artistGender !== \"\" ? <p>Gender: {this.state.artistGender}</p> : null}\n                {this.state.artistNationality !== \"\" ?<p>Nationality: {this.state.artistNationality}</p> : null}\n                {this.state.artistBirthDate !== \"\" || this.state.artistBirthDate !== null ? <p>DOB: {this.state.artistBirthDate}</p> : null}\n                {this.state.artistDeathDate !== \"\" || this.state.artistDeathDate !== null ? <p>DOD: {this.state.artistDeathDate}</p> : null}\n                {this.state.artistBio !== \"\" ? <p>{this.state.artistBio}</p> : null}\n                </div>\n            )\n            } else {return null}\n      }\n\n    componentDidMount = () =>{\n        let objectId = \"\"\n        if(this.props.id !== \"\"){\n            objectId = this.props.id\n        }\n        else {\n            objectId = localStorage.getItem(\"objectId\")\n        }\n        this.fetchObject(objectId) \n        localStorage.setItem(\"objectId\", `${this.props.id}`)\n        localStorage.setItem(\"dropdown\",\"id\" )\n    }\n\n    componentDidUpdate = props => {\n        if (props.id !== this.props.id){\n            this.fetchObject(this.props.id)\n\n            localStorage.setItem(\"objectId\", `${this.props.id}`)\n            localStorage.setItem(\"dropdown\",\"id\" )\n        }\n    }\n    \n    \n    render() {\n        if (this.state.ready === true){\n            return (\n                <Container className=\"justify-content-center\" style={{marginTop: 20, marginLeft: 20}}>\n                    <Row className=\"justify-content-center\">\n                        <Col>\n                            <Row className=\"justify-content-center\">                        \n                                <h6>Object ID: {this.state.id}</h6>\n                            </Row>\n                            <Row className=\"justify-content-center\">                        \n                                <h3>{this.state.title}</h3>\n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                {this.state.isPublicDomain === true ? <h4><Badge variant=\"primary\">  Public Domain</Badge></h4> : null}\n                                {this.state.featured === true ? <h5><Badge variant=\"primary\">  Featured</Badge></h5> : null}\n                            </Row>\n                            <Row>\n                                <Col xs=\"4\" />\n                                    <Col>\n                                        <Image fluid src={this.state.primaryImage} />\n                                    </Col>\n                                    <Col xs=\"4\" />\n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                {this.state.dimensions !== \"\" && this.state.dimensions !== undefined ? <h5>Dimensions: {this.state.dimensions}</h5> : null} \n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                {this.state.culture !== \"\" && this.state.culture !== undefined ? <h4>Culture: {this.state.culture}</h4> : null} \n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                {this.state.department !== \"\" && this.state.department !== undefined ? <h4>Department: {this.state.department}</h4> : null} \n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                {this.state.medium !== \"\" && this.state.medium !== undefined ? <h4>Medium: {this.state.medium}</h4> : null} \n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                {this.state.category !== \"\" && this.state.category !== undefined ? <h4>Category: {this.state.category}</h4> : null} \n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                {this.state.dateCreated !== \"\" && this.state.dateCreated !== undefined ? <h5>Date Created: {this.state.dateCreated}</h5> : null} \n                                {this.state.period !== \"\" && this.state.period !== undefined ? <h5>Period: {this.state.period}</h5> : null} \n                                {this.state.country !== \"\" && this.state.country !== undefined ? <h5>Country of Origin: {this.state.country}</h5> : null} \n                            </Row>\n                            <Row className=\"justfiy-content-center\">\n                                {this.state.additionalImages !== \"\" && this.state.additionalImages !== undefined ?<ImageGallery images={this.state.additionalImages} /> : null }\n                            </Row>\n                        </Col>\n                        <Col xs=\"4\">\n                            <Row className=\"justify-content-center\">\n                                {this.state.artist !== \"\" && this.state.artist !== undefined ? \n                                    <Accordion >\n                                        <Card style={{backgroundColor: \"#B85954\"}}>\n                                            <Card.Header >\n                                                <Accordion.Toggle style={{backgroundColor: \"#f5eba5\"}} as={Card.Header} variant=\"link\" eventKey=\"0\">\n                                                <h5>Artist: {this.state.artist}</h5>\n                                                </Accordion.Toggle >\n                                            </Card.Header>        \n                                            <Accordion.Collapse eventKey=\"0\">\n                                                <Card.Body style={{color: \"#f5eba5\"}}>{this.fetchArtistInfo()}</Card.Body>\n                                            </Accordion.Collapse>                        \n                                        </Card>\n                                    </Accordion>\n                                : null} \n                            </Row>\n                        </Col>\n                    </Row>\n                </Container>\n            )\n        } else{return null}\n    }\n}\n\nexport default Object\n\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\n\nfunction Home() {\n    return (\n        <Container className=\"justify-content-center\" style={{ marginTop: 20}}>\n            <h1 style={{textAlign: \"center\", marginTop: 20}}>Welcome to The Met Online</h1><br/>\n            <h2>To search for a specific item, use the dropdown menu in the header.</h2><br/>\n            <h2>Not sure what you're looking for? Click one of the area links to the left to browse the collection. Once you find the right area, you can use the dropdown menu to search for items in that area.</h2>\n            <h6 style={{position: \"fixed\", bottom: 10}}>Metropolitan Museum of Art • 1000 5th Ave, New York, NY 10028 • <a href=\"https://metmuseum.org\" style={{color: \"#000000\"}}>metmuseum.org</a></h6>\n            \n        </Container>\n    )\n}\n\nexport default Home\n","import React, { Component } from 'react'\n\nexport class List extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            listName: this.props.listName\n            ,items: []\n        }\n        this.url = this.props.url\n    }\n\n    componentDidMount(){\n        let listName = \"\"\n        if (this.props.listName !== \"\"){\n            listName = this.props.listName\n        }\n        else {\n            listName = localStorage.getItem(\"listName\")\n        }\n        fetch(`${this.url}/objects/${listName}`)\n            .then(res => res.json())\n            .then( res => {\n                this.setState({\n                    items: res\n                })\n            })\n\n            localStorage.setItem(\"listName\", `${this.props.listName}`)\n\n    }\n\n    componentDidUpdate(props){\n   \n        if (props.listName !== this.props.listName){\n        \n            fetch(`${this.url}/objects/${this.props.listName}`)\n                .then(res => res.json())\n                .then( res => {\n                    this.setState({\n                        items: res\n                    })\n                })\n\n            localStorage.setItem(\"listName\", `${this.props.listName}`)\n        }\n    }\n\n\n    setList(){\n        let listItems = this.state.items.map((val, idx) => {\n            let newItem\n            if (val !== \"\"){\n                newItem = <li key={idx}>{val}</li>\n            }\n            return newItem\n        })\n        return listItems\n    }\n\n    render() {  \n        return (\n            <div style={{overflow: \"scroll\",paddingLeft: 20}}>\n                <ul style={{listStyle: \"none\", fontSize: \"20px\", paddingTop: 20}}>\n                {this.setList()}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default List\n\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport class ObjectList extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            objects: []\n            ,ready: false\n        }\n        this.input = \"\"\n        this.dropdown = \"\"\n    }\n\n    fetchData = () => {\n        fetch(`${this.props.url}/objects/${this.dropdown}/${this.input}`)\n            .then(res => res.json())\n            .then(res => {\n                this.setState({\n                    objects: res\n                    ,ready: true\n                })\n            })\n\n    }\n\n    displayObjectList = () =>{\n\n        let list = this.state.objects.map((val, idx) =>{\n            return <Link key={idx} to={`/objects/id/${val._id}`} ><li onClick={()=> this.props.setId(val._id, \"id\")}>{val.title}</li></Link>\n        })\n\n        return list\n    }\n    componentDidMount = () =>{\n        if (this.props.input !== \"\"){\n            this.input = this.props.input\n            this.dropdown = this.props.dropdown\n            \n        }\n        else {\n            this.input = localStorage.getItem(\"formInput\")\n            this.dropdown = localStorage.getItem(\"dropdown\")\n        }\n        this.fetchData()\n        localStorage.setItem(\"formInput\", `${this.props.input}`)\n        localStorage.setItem(\"dropdown\",`${this.props.dropdown}`)\n    }\n\n    componentDidUpdate= props => {\n        if (props.input !== this.props.input){\n            this.fetchData()\n            localStorage.setItem(\"formInput\", `${this.props.id}`)\n            localStorage.setItem(\"dropdown\",`${this.props.dropdown}`)\n        }\n\n    }\n\n    render() {\n        if (this.state.ready === true){\n        return (\n            <div>\n                <ul style={{listStyle: \"none\", fontSize: \"20px\", paddingTop: 20}} >\n                    {this.displayObjectList()}\n                </ul>\n            </div>\n        )\n        } else {return null}\n    }\n}\n\nexport default ObjectList\n","import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nexport class ObjectForm extends Component {\n    constructor(props){\n        super(props)\n        this.state = {}\n    }\n\n    setType = () =>{\n        if (this.props.method === \"POST\"){\n            return <h4>Please enter the details of the item to add?</h4>\n        }\n        if (this.props.method === \"PUT\"){\n            return (<div> <h4>Please enter the details of the item to update?</h4>\n            <Form.Control type=\"input\" placeholder=\"ID (required)\" name=\"_id\" onChange={this.inputChange} />\n            </div>)\n        }\n        if (this.props.method === \"DELETE\"){\n            return (<div> <h4>Please enter the ID of the item to delete?</h4>\n            <Form.Control type=\"input\" placeholder=\"ID (required)\" name=\"_id\" onChange={this.inputChange} />\n            </div>)\n        }\n        \n    }\n\n    setForm = () => {\n        if (this.props.method !== \"DELETE\"){\n            return ( <div >\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Title\" name=\"title\" onChange={this.inputChange} />\n                <h5>Is this item in the public domain?</h5>\n                <Form.Check inline size=\"sm\" type=\"radio\" name=\"isPublicDomain\" label=\"Yes\"  onClick={() => this.setCheckbox(\"isPublicDomain\", true)} />\n                <Form.Check inline size=\"sm\" type=\"radio\" name=\"isPublicDomain\" label=\"No\"  onClick={() => this.setCheckbox(\"isPublicDomain\", false)} />\n                <h5>Should this item be featured?</h5>\n                <Form.Check inline size=\"sm\" type=\"radio\" name=\"featured\" label=\"Yes\"  onClick={() => this.setCheckbox(\"featured\", true)} />\n                <Form.Check inline size=\"sm\" type=\"radio\" name=\"featured\" label=\"No\"  onClick={() => this.setCheckbox(\"featured\", false)} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Primary Image URL\" name=\"primaryImage\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Dimensions\" name=\"dimensions\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Culture\" name=\"culture\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Department\" name=\"department\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Medium\" name=\"medium\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Category\" name=\"category\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Date Created\" name=\"dateCreated\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Period\" name=\"period\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Country\" name=\"country\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Additional Image URLS (separate by comma)\" name=\"additionalImages\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Artist\" name=\"artist\" onChange={this.inputChange} />\n            </div>)\n        }\n    }\n\n    inputChange = e =>{\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n    \n    setCheckbox = (name, value) =>{\n        this.setState({\n            [name]: value\n        })\n    }\n\n    checkImages = (e) => {\n        e.preventDefault()\n        if (this.state.additionalImages){\n            let imgArray = this.state.additionalImages.split(\",\")\n             let finalArray = imgArray.map(val =>{\n                let trimmed = val.trim()\n                return trimmed\n            })\n             this.setState({\n                 additionalImages: finalArray\n             }, () => {this.submitForm(e)})\n        } else {this.submitForm(e)}\n\n    }\n    submitForm = (e) =>{\n        \n        let url = \"\"\n        if (this.props.method === \"POST\"){\n            url = `https://met-museum-api.herokuapp.com/${this.props.type}/`\n        }\n        else {\n            url = `https://met-museum-api.herokuapp.com/${this.props.type}/${this.state._id}`\n        }\n        \n        const options = {\n            \"method\": this.props.method\n            ,\"headers\" : { \"Content-Type\" : \"application/json\"}\n            ,body: JSON.stringify(this.state)\n        }\n        fetch(url, options)\n            .then(res => res.json())\n            .then(res =>{\n                this.props.onSuccess({\n                    newId: res._id\n                    ,success: true\n                })\n            })\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.checkImages}>\n                {this.setType()}\n                {this.setForm()}\n                <Button style={{marginTop: 20, backgroundColor: \"#B85954\", border: \"none\"}} type=\"submit\" >Submit</Button>\n            </Form>\n        )\n    }\n}\n\nexport default ObjectForm\n","import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nexport class ArtistForm extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n\n        }\n    }   \n\n    setType = () =>{\n        if (this.props.method === \"POST\"){\n            return <h4>Please enter the details of the item to add?</h4>\n        }\n        if (this.props.method === \"PUT\"){\n            return (<div> <h4>Please enter the details of the item to update?</h4>\n            <Form.Control type=\"input\" placeholder=\"ID (required)\" name=\"_id\" onChange={this.inputChange} />\n            </div>)\n        }\n        if (this.props.method === \"DELETE\"){\n            return (<div> <h4>Please enter the ID of the item to delete?</h4>\n            <Form.Control type=\"input\" placeholder=\"ID (required)\" name=\"_id\" onChange={this.inputChange} />\n            </div>)\n        }\n        \n    }\n\n    setForm = () => {\n        if (this.props.method !== \"DELETE\"){\n            return ( <div>\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Name\" name=\"name\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Gender\" name=\"gender\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Nationality\" name=\"nationality\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Birth Date\" name=\"birthDate\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Death Date\" name=\"deathDate\" onChange={this.inputChange} />\n                <Form.Control size=\"sm\" type=\"input\" placeholder=\"Bio\" name=\"bio\" onChange={this.inputChange} />\n            </div>)\n        }\n    }\n\n    inputChange = e =>{\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    submitForm = (e) =>{\n        let url = \"\"\n        if (this.props.method === \"POST\"){\n            url = `https://met-museum-api.herokuapp.com/${this.props.type}/`\n        }\n        else {\n            url = `https://met-museum-api.herokuapp.com/${this.props.type}/${this.state._id}`\n        }\n        e.preventDefault()\n        const options = {\n            \"method\": this.props.method\n            ,\"headers\" : { \"Content-Type\" : \"application/json\"}\n            ,body: JSON.stringify(this.state)\n        }\n        fetch(url, options)\n        .then(res => res.json())\n        .then(res =>{\n            this.props.onSuccess({\n                newId: res._id\n                ,success: true\n            })\n        })\n}\n\n    render() {\n        return (\n            <Form onSubmit={this.submitForm}>\n                {this.setType()}\n                {this.setForm()}\n                <Button style={{marginTop: 20, backgroundColor: \"#B85954\", border: \"none\"}} type=\"submit\" >Submit</Button>\n            </Form>\n        )\n    }\n}\n\nexport default ArtistForm\n","import React, { Component } from 'react'\nimport { Form } from 'react-bootstrap'\nimport Button from 'react-bootstrap/Button'\nimport ObjectForm from './ObjectForm'\nimport ArtistForm from './ArtistForm'\n \nexport class AddNewForm extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            newId: \"\"\n            ,success: \"\"\n            ,type: \"\"\n            ,method: this.props.method\n        }\n        this.baseState = {\n            newId: \"\"\n            ,success: \"\"\n            ,type: \"\"\n            ,method: this.state.method\n        }\n    }\n\n    onSuccess = success => {\n        console.log(\"success fired\")\n        this.setState({\n            success: success.success\n            ,newId: success.newId\n        })\n    }\n\n    successDisplay = () => {\n        if (this.props.method === \"POST\"){\n            return <div style={{margin: 20}}>\n            <h3>Success! The new item ID is {this.state.newId}</h3>\n            <Button style={{marginTop: 20, backgroundColor: \"#B85954\", border: \"none\"}} type=\"button\" onClick={this.resetPage}>Submit Another New Item</Button>\n            </div>\n        }\n        if (this.props.method === \"PUT\"){\n            return <div style={{margin: 20}}>\n            <h3>Success! Item {this.state.newId} has been updated.</h3>\n            <Button style={{marginTop: 20, backgroundColor: \"#B85954\", border: \"none\"}} type=\"button\" onClick={this.resetPage}>Submit Another Update</Button>\n            </div>\n        }\n        if (this.props.method === \"DELETE\"){\n            return <div style={{margin: 20}}>\n            <h3>Success! Item {this.state.newId} has been deleted.</h3>\n            <Button style={{marginTop: 20, backgroundColor: \"#B85954\", border: \"none\"}} type=\"button\" onClick={this.resetPage}>Delete Another Item</Button>\n            </div>\n        }\n    }\n\n    setFormType = e =>{\n        e.preventDefault()\n        this.setState({\n            type: e.target.value\n        })\n    }\n\n    resetPage = () => {\n        console.log(\"fired\")\n        this.setState(this.baseState)\n    }\n\n    formType = () =>{\n        if (this.props.method === \"POST\"){\n            return <h3>What type of item would you like to add?</h3>\n        }\n        if (this.props.method === \"PUT\"){\n            return <h3>What type of item would you like to update?</h3>\n        }\n        if (this.props.method === \"DELETE\"){\n            return <h3>What type of item would you like to delete?</h3>\n        }\n        \n    }\n\n    displayForm = () => {\n\n        if (this.state.type === \"objects\"){\n            return <ObjectForm type={this.state.type}  method={this.state.method} onSuccess={this.onSuccess} />\n            \n        }\n        else if (this.state.type === \"artists\"){\n            return <ArtistForm type={this.state.type} method={this.state.method} onSuccess={this.onSuccess} />\n        }\n        else {return null}\n    }\n\n    render() {\n        if (this.state.success !== true){\n        return (<div style={{ width: \"60%\", marginLeft: 20}}>\n            {this.formType()}\n            <Form>\n                <Form.Control size=\"sm\" as=\"select\" id=\"basic-nav-dropdown\" name=\"type\" onChange={this.setFormType}>\n                    <option>Select One</option>\n                    <option value=\"objects\">Object</option>\n                    <option value=\"artists\">Artist</option>\n                </Form.Control>   \n            </Form>\n            {this.displayForm()} \n            </div>\n        )\n        }\n        else {return this.successDisplay()}\n    }\n}\n\nexport default AddNewForm\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Container, Row, Col} from 'react-bootstrap'\n\nimport Navbar from './Components/Layout/Navbar'\nimport Sidebar from './Components/Layout/Sidebar'\nimport Object from './Components/Objects/Object'\nimport Home from './Components/Layout/Home'\nimport {Route} from 'react-router-dom'\nimport FieldList from './Components/FieldList'\nimport ObjectList from './Components/Objects/ObjectList'\nimport SubmissionForm from './Components/Forms/SubmissionForm';\n\nlet url = \"https://met-museum-api.herokuapp.com\"\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      browseSelection: \"\"\n      ,dropdownSelection: \"\"\n      ,formInput: \"\"\n      ,objectId: \"\"\n    }\n    this.path = window.location.pathname\n    \n  }\n\n  setStateFromUrl = () =>{\n    let pathArray = this.path.split('/')\n    pathArray = pathArray.filter(val => (val !== \"\"))\n    if (pathArray[1] === \"random\"){\n      this.fetchRandomId()\n    }\n    if (pathArray[2] === \"list\"){\n      this.setState({\n        browseSelection: pathArray[1]\n      })\n    }\n    if (pathArray[1] === \"id\"){\n      this.setState({\n        dropdownSelection: \"id\"\n        ,formInput: pathArray[2]\n      })\n    }\n  }\n  \n\n  /* componentDidMount = () =>{\n    this.setStateFromUrl()\n  } */\n  \n  selectList = listName => {\n    this.setState({\n      browseSelection: listName\n    })\n  }\n\n  setDropdown = selection =>{\n    this.setState({\n      dropdownSelection: selection\n    })\n  }\n\n  setFormSelection = (input, optional) =>{\n    if (input.input !== undefined){\n    this.setState({\n      dropdownSelection: input.dropdown\n      ,formInput: input.input\n    })    \n  }\n  else {\n    this.setState({\n      formInput: input\n      ,dropdownSelection: optional\n    })\n  }\n  }\n\n  fetchRandomId = () => {\n    fetch(`${url}/objects/random`)\n      .then(res => res.json())\n      .then(res =>{\n        this.setState({\n          objectId: res._id\n        })\n        \n      })\n  }\n\n  render() {\n  return (\n    <Container fluid style={{ padding: 0 }} >\n     \n      <Row style={{height: \"15%\"}} noGutters className=\"row-bottom-margin\"> \n        <Col row-bottom-margin=\"true\" >\n          <Navbar dropdownSelection={this.setDropdown} sendInput={this.setFormSelection} />\n        </Col>\n      </Row>\n      <Row style={{height: \"85%\"}} noGutters >\n        <Col xs=\"2\" >\n        <Sidebar selectList={this.selectList} setId={this.fetchRandomId} \n        />\n        </Col >\n        <Col style={{height: \"100%\" ,overflow: \"scroll\", borderTop: \"12px groove #b63d37\", borderLeft: \"12px ridge #b63d37\", outlineTop: \"#FFFFFF\"}}>\n          <Route path=\"/\"\n            component={Home}\n            exact />\n          <Route path ={`/objects/${this.state.browseSelection}/list`} \n            render={() => <FieldList listName={this.state.browseSelection} url={url} />}\n      \n          />\n          {/* <Route path={`/objects/random`}\n            render={() => <Object url={url} id={this.state.objectId} />} \n            exact\n          />\n          <Route path={`/objects/${this.state.dropdownSelection}/${this.state.formInput}`} \n              render={() => {\n                  if(this.state.dropdownSelection === \"id\"){\n                    return  <Object url={url} id={this.state.formInput} />\n                  }\n                  else{\n                    return <ObjectList url={url} dropdown={this.state.dropdownSelection} input={this.state.formInput} setId={this.setFormSelection} />\n                }\n              }\n            }/>  */}\n            <Route path=\"/new\"\n            render={() => <SubmissionForm  method=\"POST\"/>}\n            />\n            <Route path=\"/update\"\n            render={() => <SubmissionForm  method=\"PUT\"/>}\n            />\n            <Route path=\"/delete\"\n            render={() => <SubmissionForm  method=\"DELETE\" />}\n            />\n        </Col>\n      </Row>\n    </Container>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}